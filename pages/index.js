import { useState, useEffect } from "react";
import Head from "next/head";
// 套件
import DatePicker from "react-datepicker";
import Modal from "react-modal";
import dayjs from "dayjs";
import toast, { Toaster } from "react-hot-toast";
// icons
import { FaPlus, FaCalendarAlt, FaTrashAlt } from "react-icons/fa";
// styles
import "react-datepicker/dist/react-datepicker.css";

Modal.setAppElement("#__next");

export default function Home() {
  const [modalIsOpen, setIsOpen] = useState(false); // modla 開關
  const [showDatePicker, setShowDatePicker] = useState(false); // 月曆開關
  const [startDate, setStartDate] = useState(new Date()); // 月曆日期
  const [taskText, setTaskText] = useState(""); // 代辦事項文字
  const [todolist, setTodolist] = useState([]); // 代辦事項列表
  const [activeTab, setActiveTab] = useState("all"); // 標籤狀態

  // modla 開關
  function openModal() {
    setIsOpen(true);
  }
  function closeModal() {
    setIsOpen(false);
    setShowDatePicker(!showDatePicker);
  }

  // 月曆開關
  const handleDatePicker = () => {
    setShowDatePicker(!showDatePicker);
    // 576 以下才開啟 modla
    if (window.innerWidth <= 576) {
      openModal();
    }
  };

  // 新增代辦事項
  const addTodo = () => {
    const formatDate = dayjs(startDate).format("YYYY-MM-DD HH:mm"); // 日期格式化
    const newTodo = {
      id: +new Date(), // 產生唯一 id
      text: taskText,
      date: formatDate,
      isChecked: false, // 是否完成
    }; // 新增代辦事項
    const updatedTodolist = [...todolist, newTodo]; // 更新代辦事項列表
    setTodolist(updatedTodolist);
    localStorage.setItem("todolist", JSON.stringify(updatedTodolist)); // 存入 localStorage
    setTaskText("");
  };
  // 刪除代辦事項
  const handleDeltedTodo = (id) => {
    const updatedTodolist = todolist.filter((item) => item.id !== id);
    setTodolist(updatedTodolist);
    localStorage.setItem("todolist", JSON.stringify(updatedTodolist));
  };
  // 手機板顯示代辦事項文字
  const handleShowText = (text) => {
    if (window.innerWidth <= 576) {
      toast(text);
    }
  };
  // 代辦事項完成狀態
  const handleCheckboxChange = (id) => {
    const updatedTodolist = todolist.map((item) => {
      if (item.id === id) {
        item.isChecked = !item.isChecked;
      }
      return item;
    });
    setTodolist(updatedTodolist);
    localStorage.setItem("todolist", JSON.stringify(updatedTodolist));
  };
  // 標籤切換
  const handleTabChange = (tab) => {
    setActiveTab(tab);
  };

  // 從 localStorage 獲取數據並初始化狀態
  useEffect(() => {
    const savedTodolist = localStorage.getItem("todolist");
    if (savedTodolist) {
      setTodolist(JSON.parse(savedTodolist));
    }
  }, []);

  return (
    <>
      <Head>
        <title>todolist-react</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="d-flex flex-column">
        <Toaster />
        <div className="container">
          {/* title */}
          <div className="title">
            <h1 className="fw-bold">代辦事項</h1>
          </div>
          {/* content */}
          <div className="content">
            {/* creat */}
            <div className="creat">
              <input
                type="text"
                value={taskText}
                onChange={(e) => setTaskText(e.target.value)}
              />
              <button className="fa-calendar-btn" onClick={handleDatePicker}>
                <FaCalendarAlt />
              </button>
              {/* 電腦版月曆 */}
              {showDatePicker ? (
                <div className="d-none d-sm-block date-picker">
                  <DatePicker
                    inline
                    showTimeSelect
                    selected={startDate}
                    onChange={(date) => setStartDate(date)}
                    popperClassName="my-popper"
                  />
                </div>
              ) : (
                ""
              )}
              {/* 手機版月曆 */}
              <Modal
                isOpen={modalIsOpen}
                onRequestClose={closeModal}
                className={`d-block d-sm-none modal`}
                overlayClassName={`overlay`}
              >
                <DatePicker
                  inline
                  showTimeSelect
                  selected={startDate}
                  onChange={(date) => setStartDate(date)}
                  popperClassName="my-popper"
                />
              </Modal>
              <button className="fa-plus-btn" onClick={addTodo}>
                <FaPlus />
              </button>
            </div>
            {/* tabs */}
            <div className="d-flex justify-content-between tabs-menu">
              <span>共{todolist.length}筆</span>
              <div className="tabs">
                <button
                  className={activeTab === "all" ? "active" : ""}
                  onClick={() => {
                    handleTabChange("all");
                  }}
                >
                  全部
                </button>
                <button
                  className={activeTab === "completed" ? "active" : ""}
                  onClick={() => {
                    handleTabChange("completed");
                  }}
                >
                  進行中
                </button>
                <button
                  className={activeTab === "incomplete" ? "active" : ""}
                  onClick={() => {
                    handleTabChange("incomplete");
                  }}
                >
                  已完成
                </button>
              </div>
            </div>
            {/* display */}
            <div className="display">
              {todolist.map((item, index) => (
                <div
                  key={index}
                  className="d-flex justify-content-between todo"
                >
                  <div className="d-flex align-items-center display-left">
                    <input
                      type="checkbox"
                      checked={item.isChecked}
                      onChange={() => handleCheckboxChange(item.id)}
                    />
                    <p
                      className="mb-0"
                      style={{
                        textDecoration: item.isChecked
                          ? "line-through"
                          : "none",
                      }}
                    >
                      {item.date}
                    </p>
                  </div>
                  <div className="d-flex align-items-center display-right">
                    <p
                      className="mb-0"
                      style={{
                        textDecoration: item.isChecked
                          ? "line-through"
                          : "none",
                      }}
                      onClick={() => handleShowText(item.text)}
                    >
                      {item.text}
                    </p>
                    <FaTrashAlt
                      onClick={() => handleDeltedTodo(item.id)}
                      className="fa-trash"
                    />
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
